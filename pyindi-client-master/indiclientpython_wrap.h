/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.0
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_PyIndi_WRAP_H_
#define SWIG_PyIndi_WRAP_H_

#include <map>
#include <string>


class SwigDirector_BaseMediator : public INDI::BaseMediator, public Swig::Director {

public:
    SwigDirector_BaseMediator(PyObject *self);
    virtual ~SwigDirector_BaseMediator();
    virtual void newDevice(INDI::BaseDevice baseDevice);
    virtual void removeDevice(INDI::BaseDevice baseDevice);
    virtual void newProperty(INDI::Property property);
    virtual void updateProperty(INDI::Property property);
    virtual void removeProperty(INDI::Property property);
    virtual void newMessage(INDI::BaseDevice baseDevice,int messageID);
    virtual void serverConnected();
    virtual void serverDisconnected(int exit_code);
    virtual void newDevice(INDI::BaseDevice *dp);
    virtual void removeDevice(INDI::BaseDevice *dp);
    virtual void newProperty(INDI::Property *property);
    virtual void removeProperty(INDI::Property *property);
    virtual void newSwitch(ISwitchVectorProperty *svp);
    virtual void newNumber(INumberVectorProperty *nvp);
    virtual void newText(ITextVectorProperty *tvp);
    virtual void newLight(ILightVectorProperty *lvp);
    virtual void newBLOB(IBLOB *bp);
    virtual void newMessage(INDI::BaseDevice *dp,int messageID);

/* Internal director utilities */
public:
    bool swig_get_inner(const char *swig_protected_method_name) const {
      std::map<std::string, bool>::const_iterator iv = swig_inner.find(swig_protected_method_name);
      return (iv != swig_inner.end() ? iv->second : false);
    }
    void swig_set_inner(const char *swig_protected_method_name, bool swig_val) const {
      swig_inner[swig_protected_method_name] = swig_val;
    }
private:
    mutable std::map<std::string, bool> swig_inner;

#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
/* VTable implementation */
    PyObject *swig_get_method(size_t method_index, const char *method_name) const {
      PyObject *method = vtable[method_index];
      if (!method) {
        swig::SwigVar_PyObject name = SWIG_Python_str_FromChar(method_name);
        method = PyObject_GetAttr(swig_get_self(), name);
        if (!method) {
          std::string msg = "Method in class BaseMediator doesn't exist, undefined ";
          msg += method_name;
          Swig::DirectorMethodException::raise(msg.c_str());
        }
        vtable[method_index] = method;
      }
      return method;
    }
private:
    mutable swig::SwigVar_PyObject vtable[18];
#endif

};


class SwigDirector_BaseClient : public INDI::BaseClient, public Swig::Director {

public:
    SwigDirector_BaseClient(PyObject *self);
    virtual ~SwigDirector_BaseClient();
    virtual void newDevice(INDI::BaseDevice baseDevice);
    virtual void removeDevice(INDI::BaseDevice baseDevice);
    virtual void newProperty(INDI::Property property);
    virtual void updateProperty(INDI::Property property);
    virtual void removeProperty(INDI::Property property);
    virtual void newMessage(INDI::BaseDevice baseDevice,int messageID);
    virtual void serverConnected();
    virtual void serverDisconnected(int exit_code);
    virtual void newDevice(INDI::BaseDevice *dp);
    virtual void removeDevice(INDI::BaseDevice *dp);
    virtual void newProperty(INDI::Property *property);
    virtual void removeProperty(INDI::Property *property);
    virtual void newSwitch(ISwitchVectorProperty *svp);
    virtual void newNumber(INumberVectorProperty *nvp);
    virtual void newText(ITextVectorProperty *tvp);
    virtual void newLight(ILightVectorProperty *lvp);
    virtual void newBLOB(IBLOB *bp);
    virtual void newMessage(INDI::BaseDevice *dp,int messageID);
    virtual bool connectServer();
    virtual bool disconnectServer(int exit_code=0);
    virtual void newPingReply(std::string uid);
    virtual void newPingReplySwigPublic(std::string uid) {
      INDI::AbstractBaseClient::newPingReply(uid);
    }
    virtual void newUniversalMessage(std::string message);
    virtual void newUniversalMessageSwigPublic(std::string message) {
      INDI::AbstractBaseClient::newUniversalMessage(message);
    }

/* Internal director utilities */
public:
    bool swig_get_inner(const char *swig_protected_method_name) const {
      std::map<std::string, bool>::const_iterator iv = swig_inner.find(swig_protected_method_name);
      return (iv != swig_inner.end() ? iv->second : false);
    }
    void swig_set_inner(const char *swig_protected_method_name, bool swig_val) const {
      swig_inner[swig_protected_method_name] = swig_val;
    }
private:
    mutable std::map<std::string, bool> swig_inner;

#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
/* VTable implementation */
    PyObject *swig_get_method(size_t method_index, const char *method_name) const {
      PyObject *method = vtable[method_index];
      if (!method) {
        swig::SwigVar_PyObject name = SWIG_Python_str_FromChar(method_name);
        method = PyObject_GetAttr(swig_get_self(), name);
        if (!method) {
          std::string msg = "Method in class BaseClient doesn't exist, undefined ";
          msg += method_name;
          Swig::DirectorMethodException::raise(msg.c_str());
        }
        vtable[method_index] = method;
      }
      return method;
    }
private:
    mutable swig::SwigVar_PyObject vtable[23];
#endif

};


#endif
